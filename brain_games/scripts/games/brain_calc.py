from random import randint  # для случайного выбора чисел
from random import choice  # для случайного выбора оперантов

# Калькулятор; делаем только +, - и *
# Операции, как и числа, выбираются случайным образом (другой блок random)
# может пригодиться библиотека match

# Общая логика для всех игр:
# задать вопрос, получить ответ, сравнить ответ; везде 3 вопроса
# реакции на верные и неверные ответы одинаковые

# Задачи:
# написать код для этой игры в вакууме, подумать, как объединить
# логику игр в один отдельный файл, сделать файл точку входа
# main.py в scripts, сделать коротку команду brain_calc
# аскинема в README.md, создать поддиректорию games для самих игр
# общий код игр в отдельный модуль - движок,
# который и будет использовать каждую игру внутри себя

# функция объяснения игроку правил мини-игры

# math.fsum(последовательность) - сумма всех членов последовательности. 
# Эквивалент встроенной функции sum(), но math.fsum() более точна для чисел 
# с плавающей точкой.

# math.isnan(X) - является ли X NaN (Not a Number - не число).

def choice_numbers():
    num_1: int = randint(-100, 100)
    num_2: int = randint(-100, 100)
    return num_1, num_2


def operation_signs(num_1, num_2):  # выбор операнда и вычисление

    signs: list = ['+', '-', '*'] # используемые операнды
    play_signs = choice(signs)  # рандомизация выбора операнда
    if play_signs == signs[0]:  # сопоставляем выбранный операнд с тем, какому индексу в списке он соответствует
        result = num_1 + num_2  # производим соответствующую операцию с числами
    elif play_signs == signs[1]:
        result = num_1 - num_2
    else:
        result = num_1 * num_2
    return result



def calc_game():  # выбор неизвестных для одного раунда игры brain_calc
    num_1, num_2 = (randint(0, 100), randint(0, 100))
    operation_signs = choice(['+', '-', '*'])
    match operation_signs:
        case '+':
            return num_1 + num_2
        case '-':
            return num_1 - num_2
        case '*':
            return num_1 * num_2